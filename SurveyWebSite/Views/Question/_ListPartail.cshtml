
@model IEnumerable<Question.Qustion>
<head>
    <style>
        th, td {
            padding: 5px;
        }
        th {
            text-align:@SurveyWebSite.Resources.Constants.Language
        }
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
        }
        .table-sortable th {
            cursor: pointer;
        }

        .table-sortable .th-sort-asc::after {
            content: "\25b4";
        }

        .table-sortable .th-sort-desc::after {
            content: "\25be";
        }

        .table-sortable .th-sort-asc::after,
        .table-sortable .th-sort-desc::after {
            margin-left: 5px;
        }

        .table-sortable .th-sort-asc,
        .table-sortable .th-sort-desc {
            background: rgba(0, 0, 0, 0.1);
        }
    </style>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>
<body dir="@SurveyWebSite.Resources.Constants.dir">
    <div id="QuestionList">
        <table class="table-sortable" style="width:100%">
            <thead>
                <tr>
                    <th dir="@SurveyWebSite.Resources.Constants.dir">@SurveyWebSite.Resources.Messages.QuestionText</th>
                    <th>@SurveyWebSite.Resources.Messages.QuestionOrder</th>
                    <th>@SurveyWebSite.Resources.Messages.QuestionType</th>
                    <td><strong>@SurveyWebSite.Resources.Messages.Operations</strong></td>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.NewText)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Order)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TypeOfQuestion)
                        </td>
                        <td>
                            @Html.ActionLink(SurveyWebSite.Resources.Messages.Edit, "EditQuestion", new { id = item.Id }) |
                            @Html.ActionLink(SurveyWebSite.Resources.Messages.Delete, @SurveyWebSite.Resources.Constants.DeleteView, new { id = item.Id })
                        </td>
                    </tr>
                }
                </tbody>
        </table>
    </div>
</body>
<script type="text/javascript">


function sortTableByColumn(table, column, asc = true) {
    const dirModifier = asc ? 1 : -1;
    const tBody = table.tBodies[0];
    const rows = Array.from(tBody.querySelectorAll("tr"));

    // Sort each row
    const sortedRows = rows.sort((a, b) => {
        const aColText = a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
        const bColText = b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();

        return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
    });

    // Remove all existing TRs from the table
    while (tBody.firstChild) {
        tBody.removeChild(tBody.firstChild);
    }

    // Re-add the newly sorted rows
    tBody.append(...sortedRows);

    // Remember how the column is currently sorted
    table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-asc", asc);
    table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-desc", !asc);
}

document.querySelectorAll(".table-sortable th").forEach(headerCell => {
    headerCell.addEventListener("click", () => {
        const tableElement = headerCell.parentElement.parentElement.parentElement;
        const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
        const currentIsAscending = headerCell.classList.contains("th-sort-asc");

        sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
    });
});

</script>
